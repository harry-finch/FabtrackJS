generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Audit logging for every important action in the system
model Log {
  id          Int      @id @default(autoincrement())
  timestamp   DateTime @default(now())
  description String   @db.VarChar(255)
  userId      Int? // Optional link to the responsible user

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// Staff who can log into the platform
model Staff {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(255)
  email       String    @unique @db.VarChar(255)
  password    String    @db.VarChar(255)
  role        String    @default("user") @db.VarChar(20)
  pwdToken    String?   @db.VarChar(40)
  tokenExpiry DateTime?
  createdAt   DateTime  @default(now())
  approved    Boolean   @default(false)
}

// Users and visitors whose activities we want to track
model User {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(255)
  surname       String    @db.VarChar(255)
  email         String    @unique @db.VarChar(255)
  usertypeId    Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
  birthYear     Int?
  comment       String?   @db.VarChar(255)
  balance       Decimal   @default(0.0)
  termsAccepted Boolean   @default(false)
  token         String    @unique @db.VarChar(40)
  deletedAt     DateTime? // Soft delete for archival

  usertype Usertype      @relation(fields: [usertypeId], references: [id])
  projects UserProject[]
  history  History[]
  warnings Warning[]
  Log      Log[]
}

// Types of users (e.g., student, startup, teacher...)
model Usertype {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(255)
  users User[]
}

// Project information
model Project {
  id            Int      @id @default(autoincrement())
  url           String   @unique @db.VarChar(255)
  projecttypeId Int
  createdAt     DateTime @default(now())
  active        Boolean  @default(true)

  projecttype Projecttype   @relation(fields: [projecttypeId], references: [id])
  users       UserProject[]
}

// Types of projects (e.g., research, personal, commercial...)
model Projecttype {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(255)
  projects Project[]
}

// Many-to-many relationship between users and projects
model UserProject {
  id        Int @id @default(autoincrement())
  userId    Int
  projectId Int

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  history History[]

  @@unique([userId, projectId])
}

// Warnings issued to users
model Warning {
  id            Int      @id @default(autoincrement())
  userId        Int
  warningtypeId Int
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  comments      String?  @db.VarChar(255)

  user        User        @relation(fields: [userId], references: [id])
  warningtype Warningtype @relation(fields: [warningtypeId], references: [id])
}

// Types of warnings (e.g., safety violation, overdue balance...)
model Warningtype {
  id   Int     @id @default(autoincrement())
  name String  @unique @db.VarChar(255)
  icon String? @db.VarChar(255)

  warnings Warning[]
}

// History of user visits to the fablab
model History {
  id            Int       @id @default(autoincrement())
  arrival       DateTime  @default(now())
  departure     DateTime?
  userId        Int
  userprojectId Int?
  comments      String?   @db.VarChar(255)
  workspaceId   Int?

  user        User         @relation(fields: [userId], references: [id])
  userproject UserProject? @relation(fields: [userprojectId], references: [id])
  workspace   Workspace?   @relation(fields: [workspaceId], references: [id])
}

// Workspaces within the fablab (e.g., 3D printing room, laser cutting room)
model Workspace {
  id       Int     @id @default(autoincrement())
  name     String  @unique @db.VarChar(255)
  location String? @db.VarChar(255)

  historyEntries History[]
  categories     Category[]
}

// Enum for ResourceType in Activity polymorphic association
enum ResourceType {
  MACHINE
  EQUIPMENT
  CONSUMABLE
}

// Tracks usage of Machines, Equipment, or Consumables within a specific activity
model Activity {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  resourceId   Int // ID of the resource (Machine, Equipment, or Consumable)
  resourceType ResourceType // Type of the resource (MACHINE, EQUIPMENT, CONSUMABLE)
  quantity     Int? // Only used for Consumables
}

// Categories within a workspace (e.g., electronics, woodworking)
model Category {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(255)
  workspaceId Int

  workspace Workspace @relation(fields: [workspaceId], references: [id])
}

// Machines in the fablab (e.g., specific 3D printers, laser cutters)
model Machine {
  id                Int       @id @default(autoincrement())
  name              String    @db.VarChar(255)
  machinetypeId     Int
  make              String    @db.VarChar(255)
  model             String    @db.VarChar(255)
  serialNumber      String?   @unique @db.VarChar(255)
  internalReference Int?
  locationId        Int?
  purchaseDate      DateTime?
  lastMaintenance   DateTime?
  warrantyExpiry    DateTime?
  picture           String?   @db.VarChar(255)
  documentation     String?   @db.VarChar(255)
  accessId          Int

  location    Location?   @relation(fields: [locationId], references: [id])
  machinetype MachineType @relation(fields: [machinetypeId], references: [id])
  access      Access      @relation(fields: [accessId], references: [id])
}

model MachineType {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  Machine Machine[]
}

// Equipment (e.g., hand tools, safety gear)
model Equipment {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)
}

// Consumable status enum to track stock status
enum ConsumableStatus {
  AVAILABLE
  LOW_STOCK
  OUT_OF_STOCK
}

// Consumables that need inventory tracking (e.g., filament, screws)
model Consumable {
  id               Int              @id @default(autoincrement())
  name             String           @unique @db.VarChar(255)
  cost             Decimal
  stock            Int              @default(0)
  reorderThreshold Int              @default(10)
  status           ConsumableStatus @default(AVAILABLE)
}

// Different locations for assets within the lab (e.g., rooms, drawers)
model Location {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(255)
  description String? @db.VarChar(255)

  machines Machine[]
}

// Access requirements for specific machines (e.g., authorization level)
model Access {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String    @db.VarChar(255)
  Machine     Machine[]
}
