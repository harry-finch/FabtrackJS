generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["relationJoins"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// Logs table for every important database access
model Log {
    id          Int       @id @default(autoincrement())
    timestamp   DateTime  @default(now())
    description String    @db.VarChar(255)
}

// Users that will actually log on to the platform
model Staff {
    id        Int      @id @default(autoincrement())
    name      String   @unique @db.VarChar(255)
    mail      String   @unique @db.VarChar(255)
    pwd       String   @db.VarChar(255)
    role      String   @default("user") @db.VarChar(20)
    pwdtoken  String   @default("0") @db.VarChar(20)
    timestamp DateTime @default(now())
    approved  Boolean  @default(false)
}

// Users and visitors whose activities we want to track
model User {
    id                  Int      @id @default(autoincrement())
    name                String   @db.VarChar(255)
    surname             String   @db.VarChar(255)
    mail                String   @unique @db.VarChar(255)
    usertypeId          Int
    accountCreationDate DateTime @default(now())
    birthYear           Int?
    comment             String?  @db.VarChar(255)
    termsAndConditions  Boolean  @default(false)
    token               String   @db.VarChar(20)

    usertype            Usertype @relation(fields: [usertypeId], references: [id])
    projects            Userproject[]
    history             History[]
    warning             Warning[]

    @@unique([name, surname])
}

// Types of users (student, startup, teacher...)
model Usertype {
    id        Int           @id @default(autoincrement())
    name      String        @unique @db.VarChar(255)
    users     User[]
}

model Project {
    id              Int           @id @default(autoincrement())
    url             String        @unique @db.VarChar(255)
    projecttypeId   Int

    projecttype     Projecttype   @relation(fields: [projecttypeId], references: [id])
    users           Userproject[]
}

model Projecttype {
    id        Int           @id @default(autoincrement())
    name      String        @unique @db.VarChar(255)
    projects  Project[]
}

// Table linking users and projects (many to many)
model UserprojectÂ {
    id          Int           @id @default(autoincrement())
    userId      Int
    projectId   Int

    user        User          @relation(fields: [userId], references: [id])
    project     Project       @relation(fields: [projectId], references: [id])
    history     History[]

    @@unique([userId, projectId])
}

// Machines in the lab (make and model, documentation...)
model Machine {
    id                Int           @id @default(autoincrement())
    machinetypeId     Int
    make              String        @db.VarChar(255)
    model             String        @db.VarChar(255)
    serialnum         String        @db.VarChar(255)
    locationId        Int
    internalReference Int?
    picture           String?       @db.VarChar(255)
    documentation     String?       @db.VarChar(255)
    accessId          Int

    machinetype       Machinetype   @relation(fields: [machinetypeId], references: [id])
    location          Location      @relation(fields: [locationId], references: [id])
    access            Access        @relation(fields: [accessId], references: [id])
}

// Type of machine (3D printer, laser cutter...)
model Machinetype {
    id            Int           @id @default(autoincrement())
    name          String        @unique @db.VarChar(255)
    machines      Machine[]
}

// Location, room, drawer...
model Location {
    id            Int           @id @default(autoincrement())
    name          String        @unique @db.VarChar(255)
    description   String?       @db.VarChar(255)
    machines      Machine[]
}

// Requires the presence of a fabmanager, free...
model Access {
    id            Int           @id @default(autoincrement())
    name          String        @db.VarChar(255)
    description   String        @db.VarChar(255)
    machines      Machine[]
}

model History {
    id              Int           @id @default(autoincrement())
    arrival         DateTime      @default(now())
    departure       DateTime?
    userId          Int
    userprojectId   Int           @default(0)
    comments        String        @db.VarChar(255)

    user            User          @relation(fields: [userId], references: [id])
    userproject     Userproject   @relation(fields: [userprojectId], references: [id])
}

model Warning {
    id              Int           @id @default(autoincrement())
    userId          Int
    warningtypeId   Int
    comments        String        @db.VarChar(255)

    user            User          @relation(fields: [userId], references: [id])
    warningtype     Warningtype   @relation(fields: [warningtypeId], references: [id])
}

model Warningtype {
    id              Int           @id @default(autoincrement())
    name            String        @db.VarChar(255)
    icon            String        @db.VarChar(255)

    warning         Warning[]
}
